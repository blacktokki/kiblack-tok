{"version":3,"file":"static/js/577.4bc13558.chunk.js","mappings":"wKAoBMA,EAAU,SAAAC,GAAD,OACbC,EAAAA,QAAsC,SAAUD,EADlD,E,63BCYA,IAAME,GAASC,EAAAA,EAAAA,aAAW,SAACH,EAAYI,GAAb,OACxBC,EAAAA,EAAAA,SAAuB,SAADC,EAAAA,EAAC,CAAD,EACjBN,GAD4B,IAE/BO,IAAKH,IAHgB,IAOnBI,GAAsDL,EAAAA,EAAAA,aAG1D,SAACH,EAAOI,GACR,IACEK,EAQET,EARFS,QACAC,EAOEV,EAPFU,cACAC,EAMEX,EANFW,cAKGC,GACDZ,EALFa,UAKEb,EAJFc,KAIEd,EAHFe,OAGEf,EAFFgB,mBACGC,EAAAA,EAAAA,SACDjB,EATJkB,IAWMC,EAAeC,EAAAA,aAClB,SAAAC,GACC,IAAAC,EAA+BD,EAAEE,OAA1BC,EAADF,EAACE,cAAeC,EAAAH,EAAAG,MAClBf,GACFA,EAAce,EAAOD,EAExB,GACD,CAACd,IAGH,OAEEU,EAAAA,cAAClB,EAADwB,EAAA,CACEC,UAAsB,IAAZlB,QAA2BmB,EACrCC,SAAUV,EACVZ,IAAKH,EACLqB,MAAOd,GACHC,GAGT,IAGDJ,EAAOsB,KDlDQ,SAAAC,GAMQ,IALrBC,EADiCD,EACjCC,MACAC,EAFiCF,EAEjCE,MACAC,EAHiCH,EAGjCG,OACAT,EAJiCM,EAIjCN,MAJiCU,EAAAJ,EAKjCtB,QAAAA,OAAO,IAAA0B,GAAGA,EAEV,OACEf,EAAAA,cAACrB,EAAD,CACE4B,UAAsB,IAAZlB,QAA2BmB,EACrCQ,MAAO,CAACJ,MAAAA,GACRE,OAAQA,EACRT,MAAOA,EACPQ,MAAOA,GACNA,EAGN,ECmCD,U,eCpDMI,E,SAASC,QAAWC,OAAO,CAC/BC,kBAOM,CAAC,IAGT,QAnB2B,SAAAxC,GACzB,OACEoB,EAAAA,cAACqB,EAAAA,QAAD,CAAML,MAAO,CAACC,EAAOG,kBAAmBxC,EAAMoC,QAC3CpC,EAAM0C,SAGZ,EClBD,SAASC,IACP,OAAOvB,EAAAA,cAACwB,EAAD,KACR,CAKDD,EAAUb,KAAOc,E,eCVjB,iBAAeb,GAAsG,IAApGN,EAAKM,EAALN,MAAOoB,EAAQd,EAARc,SAAUC,EAAMf,EAANe,OAC9B,OAAOC,EAAAA,EAAAA,KAACvC,EAAM,CACV4B,MAAO,CAACY,KAAK,GACbnC,UAAW,CAACoC,SAAS,IACrBtC,cAAec,EACff,cAAemC,EAASH,SACvBI,EAAOI,KAAI,SAACC,EAAGC,GAAC,OAAGL,EAAAA,EAAAA,KAACvC,EAAOsB,KAAI,CAASG,MAAOkB,EAAElB,MAAOR,MAAO0B,EAAE1B,OAA5B2B,EAAqC,KAElF,C","sources":["node_modules/@react-native-picker/picker/dist/module/PickerItem.js","node_modules/@react-native-picker/picker/dist/module/Picker.web.js","node_modules/@react-native-picker/picker/dist/module/UnimplementedView.web.js","node_modules/@react-native-picker/picker/dist/module/PickerIOS.web.js","src/components/CommonPicker.tsx"],"sourcesContent":["/**\n * Copyright (c) Nicolas Gallagher.\n *\n * @flow\n *\n */\n\nimport type {ColorValue} from 'react-native/Libraries/StyleSheet/StyleSheet';\n\nimport * as React from 'react';\nimport * as ReactNativeWeb from 'react-native-web';\n\ntype Props = {\n  color?: ColorValue,\n  label: string,\n  testID?: string,\n  enabled?: boolean,\n  value?: number | string,\n};\n\nconst Option = (props: any) =>\n  ReactNativeWeb.unstable_createElement('option', props);\n\n/**\n * PickerItem Component for React Native Web\n * @returns\n */\nexport default function PickerItem({\n  color,\n  label,\n  testID,\n  value,\n  enabled = true,\n}: Props): React.Node {\n  return (\n    <Option\n      disabled={enabled === false ? true : undefined}\n      style={{color}}\n      testID={testID}\n      value={value}\n      label={label}>\n      {label}\n    </Option>\n  );\n}\n","/**\n * Copyright (c) Nicolas Gallagher.\n *\n * @flow\n *\n */\n\nimport * as React from 'react';\nimport {unstable_createElement} from 'react-native-web';\nimport {forwardRef} from 'react';\nimport type {ViewProps} from 'react-native-web/src/exports/View/types';\nimport type {GenericStyleProp} from 'react-native-web/src/types';\nimport type {TextStyle} from 'react-native-web/src/exports/Text/types';\nimport PickerItem from './PickerItem';\n\ntype PickerProps = {\n  ...ViewProps,\n  children?: typeof PickerItem | Array<typeof PickerItem>,\n  enabled?: boolean,\n  onValueChange?: (number | string, number) => void,\n  selectedValue?: number | string,\n  /**\n   * dropdownIconColor\n   * Not used for Web.\n   */\n  dropdownIconColor?: string,\n  /* compat */\n  itemStyle?: GenericStyleProp<TextStyle>,\n  mode?: string,\n  prompt?: string,\n};\n\nconst Select = forwardRef((props: any, forwardedRef) =>\n  unstable_createElement('select', {\n    ...props,\n    ref: forwardedRef,\n  }),\n);\n\nconst Picker: React$AbstractComponent<PickerProps, empty> = forwardRef<\n  PickerProps,\n  *,\n>((props, forwardedRef) => {\n  const {\n    enabled,\n    onValueChange,\n    selectedValue,\n    itemStyle,\n    mode,\n    prompt,\n    dropdownIconColor,\n    ...other\n  } = props;\n\n  const handleChange = React.useCallback<any>(\n    (e: Object) => {\n      const {selectedIndex, value} = e.target;\n      if (onValueChange) {\n        onValueChange(value, selectedIndex);\n      }\n    },\n    [onValueChange],\n  );\n\n  return (\n    // $FlowFixMe\n    <Select\n      disabled={enabled === false ? true : undefined}\n      onChange={handleChange}\n      ref={forwardedRef}\n      value={selectedValue}\n      {...other}\n    />\n  );\n});\n\n// $FlowFixMe\nPicker.Item = PickerItem;\n\nexport default Picker;\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n * @format\n */\n\n'use strict';\n\nimport * as React from 'react';\nimport {View, StyleSheet} from 'react-native';\ndeclare var __DEV__: boolean;\n/**\n * Common implementation for a simple stubbed view. Simply applies the view's styles to the inner\n * View component and renders its children.\n */\nconst UnimplementedView = (props: $FlowFixMeProps): React.Node => {\n  return (\n    <View style={[styles.unimplementedView, props.style]}>\n      {props.children}\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  unimplementedView:\n    process.env.NODE_ENV !== 'production'\n      ? {\n          alignSelf: 'flex-start',\n          borderColor: 'red',\n          borderWidth: 1,\n        }\n      : {},\n});\n\nexport default UnimplementedView;\n","/**\n * @flow\n */\n\nimport * as React from 'react';\nimport UnimplementedView from './UnimplementedView';\n\nfunction PickerIOS(): React.Node {\n  return <UnimplementedView />;\n}\n\n/**\n * Fallback for other platforms\n */\nPickerIOS.Item = UnimplementedView;\n\nexport default PickerIOS;\n","import React from 'react'\nimport { Picker } from \"@react-native-picker/picker\"\n\n\nexport default ({value, setValue, values}:{value:any, setValue:(v:any)=>void, values:{label:string, value:any}[]})=>{\n    return <Picker\n        style={{flex:1}}\n        itemStyle={{fontSize:20}}\n        selectedValue={value}\n        onValueChange={setValue}>\n        {values.map((v, i)=><Picker.Item key={i} label={v.label} value={v.value} />)}\n    </Picker>\n}"],"names":["Option","props","ReactNativeWeb","Select","forwardRef","forwardedRef","unstable_createElement","_objectSpread","ref","Picker","enabled","onValueChange","selectedValue","other","itemStyle","mode","prompt","dropdownIconColor","_objectWithoutProperties","_excluded","handleChange","React","e","_e$target","target","selectedIndex","value","_extends","disabled","undefined","onChange","Item","_ref","color","label","testID","_ref$enabled","style","styles","StyleSheet","create","unimplementedView","View","children","PickerIOS","UnimplementedView","setValue","values","_jsx","flex","fontSize","map","v","i"],"sourceRoot":""}