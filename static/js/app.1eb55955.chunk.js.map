{"version":3,"sources":["src/apis/notification.ts","src/lang/index.ts","src/hooks/useLangContext.tsx","src/hooks/useAuthContext.tsx","src/hooks/useColorScheme.ts","src/lib/@expo/vector-icons.tsx","src/hooks/useIsMobile.ts","src/components/MobileSafeAreaView.tsx","App.tsx","src/hooks/useCachedResources.ts","src/assets/fonts/SpaceMono-Regular.ttf","src/constants/Envs.ts","src/apis/account.ts","src/apis/messenger.ts","src/apis/axios.ts"],"names":["getNotification","user_id","axios","get","data","length","undefined","postNotification","notification","post","putNotification","put","id","translations","ko","require","RNLocalize","Object","keys","languageTag","isRTL","I18nManager","forceRTL","intl","createIntl","defaultLocale","locale","messages","createIntlCache","IntlContext","createContext","setLocale","IntlProvider","children","useState","complete","setComplete","useEffect","AsyncStorage","getItem","then","v","Provider","value","useContext","lang","key","params","formatMessage","defaultMessage","toString","setItem","AuthContext","auth","dispatch","authReducer","initialState","action","type","request","username","password","user","Error","AuthProvider","useReducer","authState","error","setError","useMemo","groupId","membership_set","find","g","root_group_id","group","checkLogin","catch","e","console","log","login","response","message","noti","token","logout","useInitColorScheme","Appearance","set","colorScheme","setColorScheme","useColorScheme","dark","useTheme","lazyIcon","Icon","React","lazy","module","default","props","fallback","AntDesign","Ionicons","FontAwesome","MaterialIcons","FontAwesome5","Entypo","SimpleLineIcons","MaterialCommunityIcons","useMobileDetect","isMobile","Platform","OS","useIsMobile","window","innerHeight","height","setHeight","onChange","Dimensions","addEventListener","removeEventListener","View","style","queryClient","QueryClient","App","isLoadingComplete","setLoadingComplete","SplashScreen","Font","font","warn","useCachedResources","isAppearenceComplete","Navigation","MobileSafeAreaView","client","StatusBar","exports","accountURL","baseURL","split","websockerURL","FCM_PUBLIC_VAPID_KEY","FCM_API_KEY","TURN_SERVER","endsWith","r","status","setToken","guestLogin","checkLoginToken","getToken","isOffline","code","startsWith","getUserList","group_id","postUser","imageUrl","inviteGroupId","isAdmin","is_staff","isGuest","is_guest","name","patchUser","patch","ids","updated","deleteUser","userId","delete","getUserMembershipList","getExternalMembershipList","getMessengerChannelList","postChannel","channel","postDirectChannel","putChannel","deleteChannel","channel_id","getMessengerMemberList","Promise","resolve","postBulkMessengerMember","user_ids","deleteMessengerMember","member_id","getMessengerContentList","id_lt","id_lt_param","results","getNewMessengerContentList","updated_gte","getTimerMessageContentList","timer_gt","postMessage","file","formData","FormData","append","entries","forEach","headers","defaults","patchMessengerContent","content","defaultOption","withCredentials","_axios","create","interceptors","use","config","reject","finally","removeItem"],"mappings":"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","file":"static/js/app.1eb55955.chunk.js","sourcesContent":["import { Notification } from '../types';\nimport axios from './axios';\n\nexport const getNotification = async (user_id:number)=>{\n    const data = (await axios.get(`/api/v1/notifications/?type=WEB&user=${user_id}`) ).data as Notification[]\n    return data.length?data[0]:undefined\n}\n\nexport const postNotification = async(notification:Notification)=>{\n    return (await axios.post(`/api/v1/notifications/`, notification)).data as Notification\n}\n\nexport const putNotification = async(notification:Notification)=>{\n    return (await axios.put(`/api/v1/notifications/${notification.id}/`, notification)).data as Notification\n}","import { createIntl, createIntlCache } from \"@formatjs/intl\";\nimport {I18nManager} from \"react-native\";\nimport * as RNLocalize from \"react-native-localize\";\n\nexport const translations = {\n  ko: require(\"./ko.json\"),\n} as const;\n\ntype Translation = keyof typeof translations;\n\n// fallback if no available language fits\nconst fallback = { languageTag: \"en\", isRTL: false };\n\nconst { languageTag, isRTL } =\n  RNLocalize.findBestLanguageTag(Object.keys(translations)) ?? fallback;\n\n// update layout direction\nI18nManager.forceRTL(isRTL);\n\n// console.log(languageTag)\nconst intl = createIntl(\n  {\n    defaultLocale: \"en\",\n    locale: languageTag,\n    messages: translations[languageTag as Translation],\n  },\n  createIntlCache(),\n);\n\nexport default intl","import React, { createContext, useContext, useState, useEffect } from \"react\";\nimport { IntlShape } from \"@formatjs/intl\";\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nimport intl, { translations } from \"../lang\";\n\nconst IntlContext = createContext<{locale?:string, setLocale:(locale:string|undefined)=>void}>({locale:'auto', setLocale:()=>{}});\n\nexport const IntlProvider = ({children}:{children:React.ReactNode})=>{\n  const [complete, setComplete] = useState(false)\n  const [locale, setLocale] = useState<string>()\n  useEffect(()=>{\n    AsyncStorage.getItem(\"locale\").then(v=>{\n      setLocale(v || 'auto')\n      setComplete(true)\n    })\n  }, [])\n  return complete?<IntlContext.Provider value={{locale, setLocale}}>\n      {children}\n    </IntlContext.Provider>:<></>\n}\n\n\n\ntype TranslationParams = Parameters<IntlShape<string>[\"formatMessage\"]>[1];\n\nexport default ()=>{\n  const { locale, setLocale } = useContext(IntlContext)\n  return {\n    lang:(key: string, params?: TranslationParams) => {\n      if (locale == 'en' || key.length==0)\n        return key\n      if (locale != undefined && locale !='auto')\n        return translations[locale as 'ko'][key]\n      return intl\n        .formatMessage({ id: key, defaultMessage: key }, params)\n        .toString()\n    },\n    locale,\n    setLocale: (locale:string)=>{AsyncStorage.setItem('locale', locale).then(()=>setLocale(locale))}\n  }\n}\n","import React, { createContext, useContext, useEffect, useReducer, useMemo, Dispatch, useState } from \"react\"\nimport { checkLogin, login, logout } from \"../apis\"\nimport { getNotification, putNotification } from \"../apis/notification\"\nimport { UserMembership } from \"../types\"\n\ntype AuthAction = {type:string, username?:string, password?:string, user?:UserMembership|null}\n\nexport type Auth = {user?:UserMembership|null, groupId?:number}\n\ntype AuthState ={user?:UserMembership|null, request?:{username:string, password:string}|null}\n\nconst AuthContext = createContext<{auth:Auth, error?:string, dispatch:Dispatch<AuthAction>}>({auth:{}, dispatch:()=>{}});\n\nconst authReducer =(initialState:AuthState, action:AuthAction)=>{\n  switch (action.type){\n      case 'LOGIN_REQUEST':\n        return {\n          ...initialState,\n          request:{username:action.username, password:action.password},\n        } as AuthState\n      case 'LOGIN_GUEST':\n        return {\n          ...initialState,\n          request:{username:'guest', password:'guest'},\n        } as AuthState\n      case 'LOGIN_SUCCESS':\n          return{\n              ...initialState,\n              user:action.user,\n              request:undefined\n          }\n      case 'LOGIN_FAILED':\n          return{\n              ...initialState,\n              request:undefined\n          }\n      case 'LOGOUT_REQUEST':\n          return{\n              ...initialState,\n              request:null\n          }\n      case 'LOGOUT_SUCCESS':\n          return {\n            ...initialState,\n            user:null,\n            request:undefined\n          }\n      case 'REFRESH':\n        return {\n          ...initialState,\n          user:undefined\n        }\n      default:\n          throw new Error( `Unhandled action type: ${action.type}`)\n  }\n}\n\n\nexport const AuthProvider = ({children}:{children:React.ReactNode})=>{\n  const [authState, dispatch] = useReducer(authReducer, {} as Auth)\n  const [error, setError] = useState<string>()\n  const auth = useMemo(()=>({\n    user:authState.user,\n    groupId: authState.user?.membership_set.find(g=>g.root_group_id==null)?.group\n  }), [authState])\n  useEffect(()=>{\n    if(authState.user===undefined){\n      checkLogin().then((user)=>{\n        dispatch({type:\"LOGIN_SUCCESS\", user})\n      }).catch((e)=>{\n        console.log(e)\n        dispatch({type:\"LOGOUT_SUCCESS\"})\n      })\n    }\n    else if(authState.user===null && authState.request){\n      login(authState.request.username, authState.request.password).then(user=>{\n        dispatch({type:\"LOGIN_SUCCESS\", user})\n      }).catch((data)=>{\n        dispatch({type:\"LOGIN_FAILED\"})\n        setError(data.response?.data?.message)\n      })\n    }\n    else if(authState.user && authState.request===null){\n      getNotification(authState.user.id).then(noti=>{\n        noti && putNotification({...noti, token:''}).then(()=>{\n          logout().then(()=>dispatch({type:\"LOGOUT_SUCCESS\"}))\n        })\n      })\n    }\n  }, [authState])\n  return <AuthContext.Provider value={{auth, error, dispatch}}>\n    {children}\n  </AuthContext.Provider>\n}\n\nexport default ()=>{\n  const authContext = useContext(AuthContext)\n  return authContext\n}\n","import AsyncStorage from '@react-native-async-storage/async-storage';\nimport { useTheme } from '@react-navigation/native';\nimport { useMemo, useEffect, useState } from 'react';\nimport { ColorSchemeName } from 'react-native';\nimport { Appearance, ColorSchemeName as UserColorSchemeName } from 'react-native-appearance';\n\n// The useColorScheme value is always either light or dark, but the built-in\n// type suggests that it can be null. This will not happen in practice, so this\n// makes it a bit easier to work with.\n\nexport function useInitColorScheme(){\n  const [complete, setComplete] = useState(false)\n  useEffect(()=>{\n    if (!complete){\n      AsyncStorage.getItem(\"color\").then(v=>{\n        Appearance.set({colorScheme:(v==null)?'no-preference':(v as any)})\n        setComplete(true)\n      })\n    }\n  }, [complete])\n  return complete\n}\n\nexport function setColorScheme(colorScheme:UserColorSchemeName){\n  AsyncStorage.setItem('color',colorScheme as string).then(()=>Appearance.set({colorScheme}))\n}\n\nexport default function useColorScheme(): NonNullable<ColorSchemeName> {\n  const { dark } = useTheme()\n  const colorScheme = useMemo(()=> dark?'dark':'light', [dark]) as NonNullable<ColorSchemeName>;\n  return colorScheme\n}\n","\n\n\n\nimport React, { Suspense } from \"react\";\n\nconst lazyIcon = <T extends keyof typeof import(\"@expo/vector-icons\"),>(key:T)=>{\n    const Icon = React.lazy(\n        () => import(\"@expo/vector-icons\").then(module => {\n            return { default: module[key] }\n        })\n    ) as typeof import(\"@expo/vector-icons\")[T]\n    return (props:React.ComponentProps<typeof Icon>)=>{\n        return <Suspense fallback={<></>}>\n            <Icon {...props}/>\n        </Suspense>\n    }\n}\n\nexport const AntDesign = lazyIcon('AntDesign');\nexport const Ionicons = lazyIcon('Ionicons');\nexport const FontAwesome = lazyIcon('FontAwesome');\nexport const MaterialIcons = lazyIcon('MaterialIcons');\nexport const FontAwesome5 = lazyIcon('FontAwesome5');\nexport const Entypo = lazyIcon('Entypo');\nexport const SimpleLineIcons = lazyIcon('SimpleLineIcons');\nexport const MaterialCommunityIcons = lazyIcon('MaterialCommunityIcons');","import { Platform } from 'react-native';\n//@ts-ignore\nimport useMobileDetect from 'use-mobile-detect-hook';\n\nexport default ()=>{\n    const detectMobile = useMobileDetect();\n    return (detectMobile.isMobile() || Platform.OS == 'android' || Platform.OS == 'ios') as boolean\n}","import React, { useEffect, useState } from 'react'\nimport { Dimensions, Platform, View } from 'react-native'\nimport useIsMobile from '../hooks/useIsMobile'\n\n\nexport default (props:{children:React.ReactNode})=>{\n    const isMobile = useIsMobile()\n    const [height, setHeight] = useState(window.innerHeight + 1)\n    useEffect(()=>{\n        if(isMobile && Platform.OS == 'web'){\n            const onChange = (e:any)=>{\n                setHeight(window.innerHeight + 1)\n            }\n            Dimensions.addEventListener(\"change\",onChange)\n            return () => Dimensions.removeEventListener(\"change\", onChange)\n            \n        }\n    },[ isMobile])\n    return <View style={{height:isMobile&&Platform.OS == 'web'?height:'100%'}}>\n        {props.children}\n    </View>\n\n}\n  ","import React, { Suspense } from 'react';\nimport { StatusBar } from 'expo-status-bar';\nimport { SafeAreaProvider } from 'react-native-safe-area-context';\nimport useCachedResources from './src/hooks/useCachedResources';\nimport { useInitColorScheme } from './src/hooks/useColorScheme';\nimport MobileSafeAreaView from './src/components/MobileSafeAreaView';\nimport { AuthProvider } from './src/hooks/useAuthContext';\nimport { QueryClient, QueryClientProvider } from 'react-query';\nimport { IntlProvider } from './src/hooks/useLangContext';\n\nconst queryClient = new QueryClient();\n\nexport default function App() {\n  const isLoadingComplete = useCachedResources();\n  const isAppearenceComplete = useInitColorScheme()\n  const Navigation = React.lazy(()=> import('./src/navigation'))\n  if (!isLoadingComplete || !isAppearenceComplete) {\n    return null;\n  } else {\n    return (\n      <SafeAreaProvider>\n        <MobileSafeAreaView>\n          <AuthProvider>\n            <QueryClientProvider client={queryClient}>\n              <IntlProvider>\n                {/* devtools */}\n                {/* <ReactQueryDevtools initialIsOpen={true} /> */}\n                <Suspense fallback={<></>}>\n                  <Navigation/>\n                </Suspense>\n                <StatusBar />\n              </IntlProvider>\n            </QueryClientProvider>\n          </AuthProvider>\n        </MobileSafeAreaView>\n      </SafeAreaProvider>\n    );\n  }\n}\n","import { Ionicons } from '../lib/@expo/vector-icons';\nimport * as Font from 'expo-font';\nimport * as SplashScreen from 'expo-splash-screen';\nimport * as React from 'react';\n\nexport default function useCachedResources() {\n  const [isLoadingComplete, setLoadingComplete] = React.useState(false);\n\n  // Load any resources or data that we need prior to rendering the app\n  React.useEffect(() => {\n    async function loadResourcesAndDataAsync() {\n      try {\n        SplashScreen.preventAutoHideAsync();\n\n        // Load fonts\n        await Font.loadAsync({\n          ...Ionicons.font,\n          'space-mono': require('../assets/fonts/SpaceMono-Regular.ttf'),\n        });\n      } catch (e) {\n        // We might want to provide this error information to an error reporting service\n        console.warn(e);\n      } finally {\n        setLoadingComplete(true);\n        SplashScreen.hideAsync();\n      }\n    }\n\n    loadResourcesAndDataAsync();\n  }, []);\n\n  return isLoadingComplete;\n}\n","module.exports = __webpack_public_path__ + \"./fonts/SpaceMono-Regular.ttf\";","// @ts-ignore\nimport {API_URL, FCM_PUBLIC_VAPID_KEY as fcm1, FCM_API_KEY as fcm2, TURN_SERVER as turn1 } from \"@env\"\nexport const accountURL =  `${API_URL}/account/`\nexport const baseURL =  `${API_URL}/messenger/`\nconst [SCHEMA, DOMAIN] = `${API_URL}`.split('://')\nexport const websockerURL = `${SCHEMA=='https'?'wss':'ws'}://${DOMAIN}`\nexport const FCM_PUBLIC_VAPID_KEY = fcm1\nexport const FCM_API_KEY = fcm2\nexport const TURN_SERVER = turn1","\nimport { CreateUser, User, UserMembership } from '../types';\nimport axios, { getToken, setToken } from './axios';\nimport {accountURL as baseURL} from '../constants/Envs'\n\nexport const login = async(username:string, password:string) => {\n    if(username.endsWith('.guest') && password.length == 0)\n        password = 'guest'\n    const r = await axios.post(\"/api-token-auth/\", {username, password});\n    if(r.status == 200){\n        await setToken(r.data)\n        return await checkLogin()\n    }\n}\n\nexport const logout = async() => {\n    await setToken(null)\n    return await axios.get(\"/api-auth/logout/\")\n}\n\nexport const guestLogin =  async() => {\n    return await login('guest', 'guest')\n}\n\nconst checkLoginToken = async ()=>{\n    const value = (await axios.get(\"/api/v1/users/memberships/?_self=true\"))?.data\n    if (value && value.length){\n        return value[0] as UserMembership\n    }\n    return null\n}\n\nexport const checkLogin = async() => {\n    const token = await getToken()\n    if (token === null)\n        return null\n    try{\n       return await checkLoginToken()\n    }\n    catch(e:any){\n        let error = e\n        if(e.response !== undefined && e.response.status==401){\n            try{\n                return await checkLoginToken()\n            }\n            catch(e2){\n                error = e2\n            }\n        }\n        const isOffline = ((error as any).code == \"ERR_NETWORK\" || (error as any).message && ((error as any).message as string).startsWith(\"Cannot read\"))\n        throw {error, isOffline}\n    }\n}\n\nexport const getUserList = async (group_id:number)=>{\n    return (await axios.get(`/api/v1/users/?group_id=${group_id}`) ).data as User[]\n}\n\nexport const postUser = async (user:CreateUser)=>{\n    await axios.post(`/api/v1/user/`, {\n        imageUrl:user.imageUrl,\n        inviteGroupId: user.inviteGroupId,\n        isAdmin: user.is_staff,\n        isGuest: user.is_guest,\n        name: user.name,\n        password: user.password,\n        username: user.username\n    }, {baseURL})\n}\n\nexport const patchUser = async (user:{id:number, name:string, password?:string})=>{\n    await axios.patch(`/api/v1/user/`, {ids:[user.id], updated: {name:user.name, password:user.password}}, {baseURL})\n}\n\nexport const deleteUser = async (userId:number)=>{\n    await axios.delete(`/api/v1/user/${userId}/`, {baseURL})\n}\n\nexport const getUserMembershipList = async (group_id:number)=>{\n    return (await axios.get(`/api/v1/users/memberships/?group_id=${group_id}`) ).data as UserMembership[]\n}\n\nexport const getExternalMembershipList = async (username:string)=>{\n    return (await axios.get(`/api/v1/users/memberships/?username=${username}`) ).data as UserMembership[]\n}","import { Channel, MessengerMember, MessengerContent, EditMessage, MessengerChannel, EditMessengerContent } from '../types';\nimport axios from './axios';\n\nexport const getMessengerChannelList = async (user_id:number)=>{\n    return (await axios.get(`/api/v1/channels/messenger/?type=messenger&messenger_user_id=${user_id}`) ).data as MessengerChannel[]\n}\n\nexport const postChannel = async(channel:Channel)=>{\n    return (await axios.post(`/api/v1/channels/`, channel)).data as Channel\n}\n\nexport const postDirectChannel = async(channel:Channel)=>{\n    return (await axios.post(`/api/v1/channels/direct/`, channel)).data as Channel\n}\n\nexport const putChannel = async(channel:Channel)=>{\n    return (await axios.put(`/api/v1/channels/${channel.id}/`, channel)).data as Channel\n}\n\nexport const deleteChannel = async(channel_id:number)=>{\n    await axios.delete(`/api/v1/channels/${channel_id}/`)\n}\n\nexport const getMessengerMemberList = async(channel_id:number)=>{\n    try{\n        return (await axios.get(`/api/v1/messengermembers/?channel=${channel_id}`) ).data as MessengerMember[]\n    }\n    catch(e){\n        if (e.response.status==400 || e.response.status==403)\n            return Promise.resolve(null)\n        throw e\n    }\n}\n\nexport const postBulkMessengerMember = async(data:{channel_id:number, user_ids:number[]})=>{\n    await axios.post(`/api/v1/messengermembers/bulk/`, {channel:data.channel_id, user_ids:data.user_ids})\n}\n\nexport const deleteMessengerMember = async(member_id:number)=>{\n    await axios.delete(`/api/v1/messengermembers/${member_id}/`)\n}\n\nexport const getMessengerContentList = async (channel_id:number, id_lt?:number)=>{\n    const id_lt_param = id_lt?`&id_lt=${id_lt}`:''\n    return (await axios.get(`/api/v1/messengercontents/?limit=30&channel=${channel_id}${id_lt_param}`)).data.results as MessengerContent[]\n}\n\nexport const getNewMessengerContentList = async (channel_id:number, updated_gte:string)=>{\n    return (await axios.get(`/api/v1/messengercontents/?channel=${channel_id}&with_archive=true&updated_gte=${updated_gte}`)).data as MessengerContent[]\n}\n\nexport const getTimerMessageContentList = async (channel_id:number, timer_gt:string)=>{\n    return (await axios.get(`/api/v1/messengercontents/?channel=${channel_id}&timer_gt=${timer_gt}`)).data as MessengerContent[]\n}\n\nexport const postMessage = async (message:EditMessage)=>{\n    if (message.file){\n        const formData = new FormData(); // formData 객체를 생성한다.\n        formData.append(\"file\", message.file)\n        Object.entries(message).forEach(value=>{\n            formData.append(value[0], `${value[1]}`)\n        })\n        await axios.post(`/api/v1/messengercontents/messages/`, formData, {headers:{\n            ...(axios.defaults.headers as any), \"Content-Type\": \"multipart/form-data\",\n        }})\n    }\n    else{\n        await axios.post(`/api/v1/messengercontents/messages/`, message)\n    }\n}\n\nexport const patchMessengerContent = async (content:EditMessengerContent)=>{\n    return (await axios.patch(`/api/v1/messengercontents/${content.id}/`, content)).data as MessengerContent\n}\n","import axios, { AxiosRequestConfig } from 'axios';\nimport {accountURL, baseURL} from \"../constants/Envs\"\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nconst defaultOption:AxiosRequestConfig = {\n    baseURL,\n    withCredentials: true,\n    headers: {}\n};\nconst _axios = axios.create(defaultOption);\n\n_axios.interceptors.request.use(\n    config => {\n        return config;\n    },\n    error => {\n        return Promise.reject(error);\n    }\n)\n\n_axios.interceptors.response.use(\n    response => {\n        // if((response.request.responseURL as string).indexOf('/task/login')>=0 && response.data.length != 0){\n        //     // redirect login\n        // }\n        return response;\n    },\n    error => {\n        if (error.response.status === 401) {\n            return getToken().then(async(token)=>{\n                if (token){\n                    const r = await _axios.post(\"/api/v1/user/sso/refresh/\", {token}, {headers:{'Authorization':''}, baseURL: accountURL})\n                    if (r.status == 200 && r.data !== ''){\n                        setToken(r.data)\n                    }\n                }\n            }).finally(()=>{\n                return Promise.reject(error)\n            })\n        }\n        return Promise.reject(error)\n    }\n)\n\nexport const setToken = async (token:string|null)=>{\n    _axios.defaults.headers['Authorization'] = `JWT ${token}`\n    if (token)\n        await AsyncStorage.setItem(\"Authorization\", token)\n    else\n        AsyncStorage.removeItem(\"Authorization\")\n}\nexport const getToken = async ()=>{\n    const token = await AsyncStorage.getItem(\"Authorization\")\n    _axios.defaults.headers['Authorization'] = token?`JWT ${token}`:null\n    return token\n}\n\nexport default _axios\n"],"sourceRoot":""}